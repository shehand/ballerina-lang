{{#unless isDirectClass}}// This is an empty Ballerina object autogenerated to represent the `{{className}}` Java class.
//
// If you need the implementation of this class generated, please use the following command.
//
// $ ballerina bindgen [(-cp|--classpath) <classpath>...] [(-o|--output) <output>] (<class-name>...)
//
// E.g. $ ballerina bindgen {{className}}

{{/unless}}
import ballerina/java;{{#if importJavaArraysModule}}
import ballerina/java.arrays as jarrays;{{/if}}

# Ballerina object mapping for {{#if isInterface}}Java interface{{else}}{{#if isAbstract}}Java abstract class{{else}}Java class{{/if}}{{/if}} `{{className}}`.
#
# + _{{shortClassName}} - The field that represents this Ballerina object, which is used for Java subtyping.{{#each superClasses}}
# + _{{this}} - The field that represents the superclass object `{{this}}`.{{/each}}
@java:Binding {
    'class: "{{className}}"
}
{{accessModifier}}class {{shortClassName}} {

    *java:JObject;

    {{accessModifier}}{{shortClassName}}T _{{shortClassName}} = {{shortClassName}}T;{{#each superClasses}}
    {{accessModifier}}{{this}}T _{{this}} = {{this}}T;{{/each}}

    # The init function of the Ballerina object mapping `{{className}}` Java class.
    #
    # + obj - The `handle` value containing the Java reference of the object.
    {{accessModifier}}function init(handle obj) {
        self.jObj = obj;
    }

    # The function to retrieve the string value of a Ballerina object mapping a Java class.
    #
    # + return - The `string` form of the object instance.
    {{accessModifier}}function toString() returns string {
        return java:jObjToString(self.jObj);
    }{{#methodList}}{{#unless isStatic}}

    # The function that maps to the `{{javaMethodName}}` method of `{{className}}`.{{#if parameters}}
    #{{#each parameters}}
    # + {{fieldName}} - The `{{shortTypeName}}` value required to map with the Java method parameter.{{/each}}{{/if}}{{#if (getReturn this "")}}{{#unless parameters}}
    # {{/unless}}
    # + return - The `{{#replace (getReturn this "") "returns " ""}}{{/replace}}` value returning from the Java mapping.{{/if}}
    {{accessModifier}}function {{#if reservedWord}}{{#controlChars methodName ""}}{{/controlChars}}{{else}}{{methodName}}{{/if}}({{#parameters}}{{shortTypeName}} {{fieldName}}{{#if hasNext}}, {{/if}}{{/parameters}}) {{#getReturn this ""}}{{/getReturn}}{{#if (getReturn this "")}} {{/if}}{
        {{#if hasReturn}}{{externalType}}{{#if handleException}}|error{{/if}} externalObj = {{prefix}}_{{methodName}}(self.jObj{{#hasParams}}, {{/hasParams}}{{#parameters}}{{#getParams this ""}}{{/getParams}}{{/parameters}});{{#if handleException}}
        if (externalObj is error) {
            {{exceptionName}} e = {{exceptionName}}({{exceptionConstName}}, message = externalObj.message(), cause = externalObj);
            return e;
        } else { {{/if}}{{#if objectReturn}}{{#if isArrayReturn}}
        {{returnType}} obj = [];
        handle[] anyObj = <handle[]>check jarrays:fromHandle(externalObj, "handle");
        int count = anyObj.length();
        foreach int i in 0 ... count-1 {
            {{returnComponentType}} element = new(anyObj[i]);
            obj[i] = element;
        }
        return obj;{{else}}
        {{returnType}} obj = new({{#if isStringReturn}}java:toString({{/if}}externalObj{{#if isStringReturn}}){{/if}});
        return obj;{{/if}}{{else}}
        return {{#if isStringReturn}}java:toString({{else if isArrayReturn}}<{{returnType}}>check jarrays:fromHandle({{/if}}externalObj{{#if isStringReturn}}){{else if isArrayReturn}}, "{{returnTypeJava}}"){{/if}};{{/if}}{{#if handleException}}
        }{{/if}}{{else}}{{#if hasException}}error|{{/if}}() obj = {{prefix}}_{{methodName}}(self.jObj{{#hasParams}}, {{/hasParams}}{{#parameters}}{{#getParams this ""}}{{/getParams}}{{/parameters}});{{#if hasException}}
        if (obj is error) {
            {{#if handleException}}{{exceptionName}} e = {{exceptionName}}({{exceptionConstName}}, message = obj.message(), cause = obj);
            return e;{{else}}return obj;{{/if}}
        }{{/if}}{{/if}}
    }{{/unless}}{{/methodList}}{{#fieldList}}{{#unless isStatic}}{{#if isSetter}}

    # The function to set the value of the public field {{fieldName}}.
    #
    # + arg - The `{{fieldType}}` value that is to be set for the field.
    {{accessModifier}}function {{fieldMethodName}}({{fieldType}} arg) {
        _ = {{prefix}}_{{fieldMethodName}}(self.jObj, {{#getParams fieldObj ""}}{{/getParams}});
    }{{else}}

    # The function that retrieves the value of the public field {{fieldName}}.
    #
    # + return - The `{{fieldType}}` value of the field.
    {{accessModifier}}function {{fieldMethodName}}() returns {{fieldType}}{{#if isString}}?{{/if}}{{#if returnError}}|error{{/if}} {
        return {{#if isString}}java:toString({{else if isArray}}<{{fieldType}}>check jarrays:fromHandle({{/if}}{{prefix}}_{{fieldMethodName}}(self.jObj){{#if isString}}){{else if isArray}}, "{{returnTypeJava}}"){{/if}};
    }{{/if}}{{/unless}}{{/fieldList}}
}
{{#initFunctionList}}
# Constructor function to generate an object of type `{{shortClassName}}` representing the `{{className}}` Java class.
#{{#if parameters}}{{#each parameters}}
# + {{fieldName}} - The `{{shortTypeName}}` value required to map with the Java constructor parameter.{{/each}}{{/if}}
# + return - The new `{{shortClassName}}` object {{#if hasException}}or `{{#if handleException}}|{{exceptionName}}{{/if}}{{#if returnError}}|error{{/if}}` error {{/if}}generated.
{{accessModifier}}function new{{shortClassName}}{{constructorName}}({{#parameters}}{{shortTypeName}} {{fieldName}}{{#if hasNext}}, {{/if}}{{/parameters}}) returns {{shortClassName}}{{#if hasException}}{{#if handleException}}|{{exceptionName}}{{/if}}{{#if returnError}}|error{{/if}}{{/if}} {
    handle{{#if handleException}}|error{{/if}} obj = {{prefix}}_{{externalFunctionName}}({{#parameters}}{{#getParams this ""}}{{/getParams}}{{/parameters}});{{#if handleException}}
    if (obj is error) {
        {{exceptionName}} e = {{exceptionName}}({{exceptionConstName}}, message = obj.message(), cause = obj);
        return e;
    } else { {{/if}}
    {{shortClassName}} {{initObjectName}} = new(obj);
    return {{initObjectName}};{{#if handleException}}
    } {{/if}}
}
{{/initFunctionList}}{{#methodList}}{{#isStatic}}
# The function that maps to the `{{javaMethodName}}` method of `{{className}}`.{{#if parameters}}
#{{#each parameters}}
# + {{fieldName}} - The `{{shortTypeName}}` value required to map with the Java method parameter.{{/each}}{{/if}}{{#if (getReturn this "")}}{{#unless parameters}}
# {{/unless}}
# + return - The `{{#replace (getReturn this "") "returns " ""}}{{/replace}}` value returning from the Java mapping.{{/if}}
{{accessModifier}}function {{shortClassName}}_{{methodName}}({{#parameters}}{{shortTypeName}} {{fieldName}}{{#if hasNext}}, {{/if}}{{/parameters}}) {{#getReturn this ""}}{{/getReturn}}{{#if (getReturn this "")}} {{/if}}{
    {{#if hasReturn}}{{externalType}}{{#if handleException}}|error{{/if}} externalObj = {{prefix}}_{{methodName}}({{#parameters}}{{#getParams this ""}}{{/getParams}}{{/parameters}});{{#if handleException}}
    if (externalObj is error) {
        {{exceptionName}} e = {{exceptionName}}({{exceptionConstName}}, message = externalObj.message(), cause = externalObj);
        return e;
    } else { {{/if}}{{#if objectReturn}}{{#if isArrayReturn}}
    {{returnType}} obj = [];
    handle[] anyObj = <handle[]>check jarrays:fromHandle(externalObj, "handle");
    int count = anyObj.length();
    foreach int i in 0 ... count-1 {
        {{returnComponentType}} element = new(anyObj[i]);
        obj[i] = element;
    }
    return obj;{{else}}
    {{returnType}} obj = new({{#if isStringReturn}}java:toString({{/if}}externalObj{{#if isStringReturn}}){{/if}});
    return obj;{{/if}}{{else}}
    return {{#if isStringReturn}}java:toString({{else if isArrayReturn}}<{{returnType}}>check jarrays:fromHandle({{/if}}externalObj{{#if isStringReturn}}){{else if isArrayReturn}}, "{{returnTypeJava}}"){{/if}};{{/if}}{{#if handleException}}
    }{{/if}}{{else}}{{#if hasException}}error|{{/if}}() obj = {{prefix}}_{{methodName}}({{#parameters}}{{#getParams this ""}}{{/getParams}}{{/parameters}});{{#if hasException}}
    if (obj is error) {
        {{#if handleException}}{{exceptionName}} e = {{exceptionName}}({{exceptionConstName}}, message = obj.message(), cause = obj);
        return e;{{else}}return obj;{{/if}}
    }{{/if}}{{/if}}
}
{{/isStatic}}{{/methodList}}{{#fieldList}}{{#if isStatic}}{{#if isSetter}}
# The function to set the value of the public field {{fieldName}}.
#
# + arg - The `{{fieldType}}` value that is to be set for the field.
{{accessModifier}}function {{shortClassName}}_{{fieldMethodName}}({{fieldType}} arg) {
    _ = {{prefix}}_{{fieldMethodName}}({{#getParams fieldObj ""}}{{/getParams}});
}
{{else}}
# The function that retrieves the value of the public field {{fieldName}}.
#
# + return - The `{{fieldType}}` value of the field.
{{accessModifier}}function {{shortClassName}}_{{fieldMethodName}}() returns {{fieldType}}{{#if isString}}?{{/if}}{{#if returnError}}|error{{/if}} {
    {{#if isObject}}
    {{fieldType}} obj = new({{#if handleException}}check {{/if}}{{#if isStringReturn}}java:toString({{/if}}{{prefix}}_{{fieldMethodName}}(){{#if isStringReturn}}){{/if}});
    return obj;{{else}}
    return {{#if isString}}java:toString({{else if isArray}}<{{fieldType}}>check jarrays:fromHandle({{/if}}{{prefix}}_{{fieldMethodName}}(){{#if isString}}){{else if isArray}}, "{{returnTypeJava}}"){{/if}};{{/if}}
}
{{/if}}{{/if}}{{/fieldList}}{{#if constructorList}}
// External interop functions for mapping public constructors.
{{/if}}{{#constructorList}}
function {{prefix}}_{{constructorName}}({{#parameters}}{{externalType}} {{fieldName}}{{#if hasNext}}, {{/if}}{{/parameters}}) returns handle{{#if handleException}}|error{{/if}} = {{interopType}} {
    'class: "{{className}}",
    paramTypes: [{{#parameters}}"{{type}}"{{#if hasNext}}, {{/if}}{{/parameters}}]
} external;
{{/constructorList}}{{#if methodList}}
// External interop functions for mapping public methods.
{{/if}}{{#methodList}}
function {{prefix}}_{{methodName}}({{#getInteropMethod this "param"}}{{/getInteropMethod}}){{#getInteropMethod this "return"}}{{/getInteropMethod}} = {{interopType}} {
    name: "{{javaMethodName}}",
    'class: "{{className}}",
    paramTypes: [{{#parameters}}"{{type}}"{{#if hasNext}}, {{/if}}{{/parameters}}]
} external;
{{/methodList}}{{#if fieldList}}
// External interop functions for mapping public fields.
{{/if}}{{#fieldList}}
function {{prefix}}_{{fieldMethodName}}({{#getInteropFieldParam this ""}}{{/getInteropFieldParam}}){{#unless isSetter}} returns {{externalType}}{{/unless}} = {{interopType}} {
    name: "{{fieldName}}",
    'class: "{{className}}"
} external;
{{/fieldList}}
