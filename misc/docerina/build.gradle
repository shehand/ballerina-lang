/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
apply from: "$rootDir/gradle/javaProject.gradle"
apply plugin: 'com.github.johnrengelman.shadow'

configurations.all {
    resolutionStrategy.preferProjectModules()
}

configurations {
    distBal {
        transitive false
    }
    highlighterLib {
        transitive false
    }

    docSearchLib {
        transitive false
    }

    htmlTemplateResources {
        transitive false
    }

    syntaxHighlighter {
        transitive false
    }

    docSearch {
        transitive false
    }
}

dependencies {
    highlighterLib project(path: ':composer-library', configuration: 'highlighter')
    docSearchLib project(path: ':composer-library', configuration: 'docsearch')
    implementation project(':ballerina-lang')
    implementation project(':ballerina-tool')
    implementation project(':ballerina-lang:annotations')
    implementation project(':ballerina-http')
    implementation project(':ballerina-config')
    implementation project(':ballerina-mime')
    implementation 'info.picocli:picocli'
    implementation 'com.github.jknack:handlebars'
    implementation 'org.antlr:antlr4:4.5'
    implementation 'com.atlassian.commonmark:commonmark'
    implementation 'com.atlassian.commonmark:commonmark-ext-gfm-tables'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'commons-io:commons-io'
    implementation 'com.google.code.gson:gson:2.7'
    implementation 'org.slf4j:slf4j-api'
    distBal project(path: ':ballerina-lang:annotations', configuration: 'baloImplementation')
    distBal project(path: ':ballerina-http', configuration: 'baloImplementation')
    distBal project(path: ':ballerina-io', configuration: 'baloImplementation')
    
    testCompile 'org.testng:testng'
    testCompile 'org.slf4j:slf4j-jdk14'

}

artifacts {
    htmlTemplateResources file("$sourceSets.main.output.resourcesDir/html-template-resources/"), { builtBy(processResources) }
    syntaxHighlighter file("$sourceSets.main.output.resourcesDir/syntax-highlighter/"), { builtBy(processResources) }
    docSearch file("$sourceSets.main.output.resourcesDir/doc-search/"), { builtBy(processResources) }
}

jar {
    enabled = false
    dependsOn(shadowJar { classifier = null })
    manifest {
        attributes(
            'Main-Class': 'org.ballerinalang.docgen.docs.BallerinaDocGeneratorMain',
            'Implementation-Title': 'Ballerina - Docerina',
            'Specification-Title': 'Ballerina - Docerina',
            'Specification-Vendor': 'WSO2',
            'Implementation-Vendor-Id': 'org.ballerinalang',
            'Implementation-Vendor': 'WSO2',
            'Implementation-URL': 'https://ballerina.io/misc/docerina/'
        )
    }
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    dependencies {
        include(dependency('com.github.jknack:handlebars'))
        include(dependency('org.antlr:antlr4:4.5'))
        include(dependency('com.atlassian.commonmark:commonmark'))
        include(dependency('com.atlassian.commonmark:commonmark-ext-gfm-tables'))
        exclude('META-INF/*.SF')
        exclude('META-INF/*.DSA')
        exclude('META-INF/*.RSA')
    }
}

task copyBalo(type: Copy) {
    from configurations.distBal
    into("$buildDir/lib")
}

processResources {
    dependsOn 'copyHighlighter'
    dependsOn 'copyDocSearch'
}

task copyHighlighter(type: Copy) {
    dependsOn ":composer-library:npmBuild"
    from configurations.highlighterLib {
        include '*.js'
    }
    into("$buildDir/resources/main/syntax-highlighter")
}

task copyDocSearch(type: Copy) {
    dependsOn ":composer-library:npmBuild"
    from configurations.docSearchLib {
        include '*.js'
    }
    into("$buildDir/resources/main/doc-search")
}

test {
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

description = 'Ballerina - Docerina'
