/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'base'
}

apply from: "$rootDir/gradle/repositories.gradle"

configurations.all {
    resolutionStrategy.preferProjectModules()
}

configurations {
    dist {
      transitive false
    }
    distBal {
        transitive false
    }
    langserverLib {
        transitive false
    }
    datamapperLib {
        transitive false
    }
    ballerinaZip {
        transitive false
    }
    debugAdapterLauncher {
        transitive false
    }
    debugAdapterDistribution {
        transitive false
    }
    composerDistribution {
        transitive false
    }
    composerFonts {
        transitive false
    }
    docerina
    bin
    bir
    birJar
    balSource
    balDoc
    balxSource
    balxBir {
        transitive false
    }
    zip
    balo
    resourceFiles
    staticFiles
    balx
    unzipped
    syntaxHighlighter {
        transitive false
    }

    htmlTemplateResources {
        transitive false
    }
}

dependencies {
    dist 'org.bytedeco:javacpp:1.4.2'
    dist 'com.fasterxml.jackson.core:jackson-databind:2.8.6'
    dist 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    dist 'com.fasterxml.jackson.core:jackson-annotations:2.8.0'
    dist 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.8'
    // dist 'org.ow2.asm:asm:6.2.1'
    dist 'org.codehaus.woodstox:woodstox-core-asl:4.2.0'
    dist 'org.codehaus.woodstox:stax2-api:3.1.1'
    dist 'org.apache.commons:commons-compress:1.18'
    dist 'me.tongfei:progressbar:0.7.4'
    dist 'org.jline:jline:3.11.0'

    // Following dependencies are required for kraal library
    dist 'org.jetbrains.kotlin:kotlin-stdlib:1.3.31'
    dist 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31'
    dist 'org.ow2.asm:asm:7.1'
    dist 'org.ow2.asm:asm-analysis:7.1'
    dist 'org.ow2.asm:asm-tree:7.1'
    dist 'org.ow2.asm:asm-util:7.1'
    dist 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5'
    
    dist project(':ballerina-tools-api')
    dist project(':ballerina-parser')
    dist project(':ballerina-cli-utils')
    dist project(':ballerina-tool')
    dist project(':ballerina-cli-module')
    dist project(':ballerina-rt')
    dist project(':ballerina-choreo-extension-rt')

    dist project(':testerina:testerina-core')
    dist project(':formatter:formatter-core')
    dist project(':formatter:formatter-cli')
    dist project(':ballerina-bindgen')
    dist project(':maven-resolver')
    dist project(':language-server:language-server-compiler')
    dist project(':language-server:language-server-commons')
    dist project(':ballerina-packerina')
    dist project(':openapi-ballerina:ballerina-to-openapi-generator')
    dist project(':openapi-ballerina:openapi-to-ballerina-generator')
    dist project(':openapi-ballerina:openapi-validator')
    dist project(':openapi-ballerina:ballerina-client-generator')
    dist project(':docerina')
    dist project(':observerability-symbol-collector')
    dist project(':testerina:testerina-runtime')
    docerina project(':docerina-gradle-plugin')

    datamapperLib project(':ballerinalang-data-mapper')

    langserverLib project(path: ':language-server:language-server-core', configuration: 'libs')
    langserverLib project(':language-server:language-server-stdio-launcher')
    langserverLib project(':language-server:language-server-cli')
    langserverLib project(':language-server:language-server-core')
    debugAdapterDistribution project(':debug-adapter:debug-adapter-core')
    debugAdapterDistribution project(':debug-adapter:debug-adapter-cli')

    balSource project(path: ':jballerina', configuration: 'source')

    balxSource project(path: ':jballerina', configuration: 'sourceBalx')
    distBal project(path: ':jballerina', configuration: 'balo')
    dist project(path: ':jballerina', configuration: 'jar')
    bin project(path: ':jballerina', configuration: 'bin')
    staticFiles project(path: ':jballerina', configuration: 'staticFiles')
    resourceFiles project(path: ':jballerina', configuration: 'resourceFiles')
    composerDistribution project(path: ':composer-library', configuration: 'composer')
    composerFonts project(path: ':composer-library', configuration: 'fonts')

    distBal project(path: ':testerina:testerina-core', configuration: 'baloImplementation')
    balSource project(path: ':testerina:testerina-core', configuration: 'balSource')

    birJar project(path: ':metrics-extensions:ballerina-prometheus-extension', configuration: 'prometheusJar')

    // ballerinax module cache
    balxBir project(path: ':ballerina-java', configuration: 'bir')

    balDoc project(path: ':ballerina-observability', configuration: 'balDoc')
    balDoc project(path: ':ballerina-openapi', configuration: 'balDoc')
    balDoc project(path: ':ballerina-transactions', configuration: 'balDoc')

    // Lang Libs
    balDoc project(path: ':ballerina-lang:internal', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:annotations', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:array', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:decimal', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:error', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:floatingpoint', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:future', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:integer', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:map', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:object', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:stream', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:table', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:string', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:typedesc', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:value', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:xml', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:bool', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:query', configuration: 'balDoc')
    balDoc project(path: ':ballerina-lang:transaction', configuration: 'balDoc')

    // ballerinax modules
    balDoc project(path: ':ballerina-java', configuration: 'balDoc')

    // testerina modules
    balDoc project(path: ':testerina:testerina-core', configuration: 'balDoc')

    syntaxHighlighter project(path: ':docerina', configuration: 'syntaxHighlighter')
    htmlTemplateResources project(path: ':docerina', configuration: 'htmlTemplateResources')

}


task configured {
    configurations.distBal.allDependencies.withType(ProjectDependency) {
        def path = it.getDependencyProject().path
        dependencies.add("bir", dependencies.project(path: path, configuration: 'bir'))
        dependencies.add("birJar", dependencies.project(path: path, configuration: 'birJar'))
    }

}

def copyJarSpec = {
    base -> copySpec {
        from configurations.dist
        into(base + 'bre/lib')
    }
}

def copyBaloSpec = {
    path -> copySpec {
        from configurations.distBal
        into(path + 'lib')
        fileMode 0644
    }
}

def copyBirSpec = {
    path -> copySpec {
        from configurations.bir
        into(path + 'bir-cache')
    }
}

def copyBirJarSpec = {
    path -> copySpec {
        from configurations.birJar
        into(path + 'bre/lib')
    }
}

def copyBalxSpec = {
    path -> copySpec {
        from configurations.balx
        into(path + 'lib/balx')
    }
}

def copyStaticSpec = {
    path -> copySpec {
        from configurations.staticFiles
        into(path)
    }
}

def copyTemplatesSpec = {
    path -> copySpec {
        from project(':docerina').file('src/main/resources/template/html')
        into(path + 'lib/templates')
    }
}

def copyResourceSpec = {
    path -> copySpec {
        from configurations.resourceFiles
        into("$path/bre")
    }
}

//def copySrcBaloSpec = {
//    path -> copySpec {
//        from configurations.balSource.files
//        into("$path/src")
//    }
//}

def copyBinSpec = {
    path -> copySpec {
        from configurations.bin
        filter { line -> line.replace('${project.version}', "$project.version") }
        into(path + 'bin')
    }
}

def copyKraalLib = {
    path -> copySpec {
        from('lib')
        into("$path/bre/lib")
    }
}

def copyJaCoCoAgent = {
    path -> copySpec {
        from('jacoco/jacocoagent.jar')
        into("$path/bre/lib")
    }
}

def copyLangServerBinSpec = {
    path -> copySpec {
        from('resources/language-server-launcher.sh')
        from('resources/language-server-launcher.bat')
        into(path + 'lib/tools/lang-server/launcher')
    }
}
def copyDebugAdapterLauncher = {
    path -> copySpec {
        from('resources/debug-adapter-launcher.sh')
        from('resources/debug-adapter-launcher.bat')
        into(path + 'lib/tools/debug-adapter/launcher')
    }
}

def copydebugAdapterDistributionSpec = {
    path -> copySpec {
        from configurations.debugAdapterDistribution
        into(path + 'lib/tools/debug-adapter/lib')
     }
}

def copyBallerinaZipSpec = {
    path -> copySpec {
        configurations.ballerinaZip.asFileTree.each {
            from(zipTree(it)) { includeEmptyDirs false }
            eachFile { f ->
                f.path = f.path.replaceFirst("ballerina-${project.version}/", '')
            }
        }
        into(path)
    }
}

def copyLangServerLibsSpec = {
    path -> copySpec {
        from configurations.langserverLib
        into(path + 'lib/tools/lang-server/lib')
    }
}

def copyDataMapperLibsSpec = {
    path -> copySpec {
        from configurations.datamapperLib
        into(path + 'lib/tools/lang-server/lib')
    }
}

def copyComposerDistributionSpec = {
    path -> copySpec {
        from(configurations.composerDistribution)
        into(path + 'lib/tools/composer-library')
        exclude('**/*.d.ts')
        exclude('**/*.map')
    }
}

def copyComposerFontsSpec = {
    path -> copySpec {
        from configurations.composerFonts
        into(path + 'lib/tools/composer-library')
        exclude('**/*.d.ts')
        exclude('**/*.map')
    }
}

def apiDocsSpec = {
    path -> copySpec {
        from generateDocs.outputs.files
        into("$path/docs")
    }
}

task extractBalxBirs(type: Copy) {
    def path = "$buildDir/bir-cache"
    from configurations.balxBir.files
    into path
}

// Fix for windows class path too long issue
task pathingJar(type: Jar) {
    appendix = "pathing"
    doFirst {
        manifest {
            attributes "Class-Path": configurations.docerina.files.collect {
                it.toURL().toString().replaceFirst("file:/", "/")
            }.join(' ')
        }
    }
}

task copyApiDocs(type: Copy) {
    dependsOn configurations.balDoc
    from configurations.balDoc.files
    into "$buildDir/api-docs";
    exclude "index.html"
    exclude "html-template-resources"
    exclude "syntax-highlighter"
}

task copyHighlighter(type: Copy) {
    dependsOn configurations.syntaxHighlighter
    from configurations.syntaxHighlighter
    into "$buildDir/api-docs/syntax-highlighter";
}

task copyHtmlTemplateResources(type: Copy) {
    dependsOn configurations.htmlTemplateResources
    from configurations.htmlTemplateResources
    into "$buildDir/api-docs/html-template-resources";
}

task generateDocs(type: JavaExec) {
    dependsOn pathingJar
    dependsOn copyApiDocs
    dependsOn copyHighlighter
    dependsOn copyHtmlTemplateResources
    dependsOn ':docerina-gradle-plugin:build'
    outputs.dir("$buildDir/api-docs")
    outputs.cacheIf { true }
    systemProperty("ballerina.home", "$buildDir")
    classpath = files(pathingJar.archivePath)
    main = 'org.ballerinalang.plugin.gradle.doc.DocerinaGen'
    args("$buildDir/api-docs")
}

task createApiDocsZip(type: Zip) {
    from generateDocs.outputs.files
    archiveName "ballerina-api-docs-${project.version}.zip"
}

task createZip(type: Zip) {
    def basePath = '/' + project.name + '-' + project.version + '/'
    with copyJarSpec(basePath)
    with copyBirSpec(basePath)
    with copyBirJarSpec(basePath)
    with copyBaloSpec(basePath)
    with copyBalxSpec(basePath)
    with copyBinSpec(basePath)
    with copyLangServerLibsSpec(basePath)
    with copyDataMapperLibsSpec(basePath)
    with copyLangServerBinSpec(basePath)
    with copyComposerDistributionSpec(basePath)
    with copyComposerFontsSpec(basePath)
    with copyBallerinaZipSpec(basePath)
    with copydebugAdapterDistributionSpec(basePath)
    with copyDebugAdapterLauncher(basePath)
    with apiDocsSpec(basePath)
    with copyStaticSpec(basePath)
    with copyTemplatesSpec(basePath)
    with copyResourceSpec(basePath)
//    with copySrcBaloSpec(basePath)
    with copyKraalLib(basePath)
    with copyJaCoCoAgent(basePath)
}

task updateBalHome(type: Copy) {
    def installDir = ""
    with copyJarSpec(installDir)
    with copyBirSpec(installDir)
    with copyBirJarSpec(installDir)
    with copyBaloSpec(installDir)
    with copyBalxSpec(installDir)
    with copyBinSpec(installDir)
    with copyLangServerLibsSpec(installDir)
    with copyDataMapperLibsSpec(installDir)
    with copyLangServerBinSpec(installDir)
    with copyComposerDistributionSpec(installDir)
    with copyComposerFontsSpec(installDir)
    with copyBallerinaZipSpec(installDir)
    with copydebugAdapterDistributionSpec(installDir)
    with copyDebugAdapterLauncher(installDir)
    with apiDocsSpec(installDir)
    with copyStaticSpec(installDir)
    with copyTemplatesSpec(installDir)
    with copyResourceSpec(installDir)
    with copyKraalLib(installDir)
    with copyJaCoCoAgent(installDir)
//    with copySrcBaloSpec(installDir)
    into System.getenv('BAL_HOME')
}

task createDistribution(type: Copy) {
    mustRunAfter(':language-server:language-server-core:createZip')
    def filePath = "$buildDir/extracted-distributions/${project.name}-${project.version}"
    file(filePath).mkdirs()
    with copyJarSpec("")
    with copyBirSpec("")
    with copyBirJarSpec("")
    with copyBaloSpec("")
    with copyBalxSpec("")
    with copyBinSpec("")
    with copyLangServerLibsSpec("")
    with copyDataMapperLibsSpec("")
    with copyLangServerBinSpec("")
    with copyComposerDistributionSpec("")
    with copyComposerFontsSpec("")
    with copyBallerinaZipSpec("")
    with copydebugAdapterDistributionSpec("")
    with copyDebugAdapterLauncher("")
    with apiDocsSpec("")
    with copyStaticSpec("")
    with copyTemplatesSpec("")
    with copyResourceSpec("")
//    with copySrcBaloSpec("")
    with copyKraalLib("")
    with copyJaCoCoAgent("")
    destinationDir=file(filePath)
}

build {
    dependsOn createZip
    dependsOn createDistribution
    // finalizedBy ':ballerina-tools-integration-test:test'
}

artifacts {
    balo configurations.distBal.files
    zip file: file("$buildDir/distributions/${project.name}-${project.version}.zip"), builtBy: createZip
    unzipped file: file("$buildDir/extracted-distributions/${project.name}-${project.version}"), builtBy: createDistribution
}

// This section makes sure that checkstyle/spotbug runs when dist is build.
project.afterEvaluate {
    configurations.dist.dependencies
        .findAll { it instanceof ProjectDependency }
        .each {
            it.dependencyProject.afterEvaluate {
                def dependencyCheck = it.tasks.find { it.name == 'check' }
                check.dependsOn dependencyCheck
            }
        }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createZip, extension: 'zip'
        }
    }
}
