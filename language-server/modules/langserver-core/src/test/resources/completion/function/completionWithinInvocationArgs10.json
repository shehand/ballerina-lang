{
  "position": {
    "line": 10,
    "character": 35
  },
  "source": "function/source/completionWithinInvocationArgs10.bal",
  "items": [
    {
      "label": "getAsString(string key, string defaultValue)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nRetrieves the specified configuration value as a string.\n```ballerina\n# string host = config:getAsString(\"http.host\");\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration to be retrieved  \n- `string` defaultValue: The default value to be used in case there is no mapping for the provided key(Defaultable)  \n  \n**Returns** `string`   \n- Configuration value mapped with the given key  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getAsString(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getAsInt(string key, int defaultValue)(int)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nRetrieves the specified configuration value as an int.\n```ballerina\n# int port = config:getAsInt(\"http.port\");\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration to be retrieved  \n- `int` defaultValue: The default value to be used in case there is no mapping for the provided key(Defaultable)  \n  \n**Returns** `int`   \n- Configuration value mapped with the given key  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getAsInt(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getAsFloat(string key, float defaultVal)(float)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nRetrieves the specified configuration value as a float.\n```ballerina\n# float evictionFactor = config:getAsFloat(\"http.eviction_factor\");\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration to be retrieved  \n- `float` defaultVal: The default value to be used in case there is no mapping for the provided key(Defaultable)  \n  \n**Returns** `float`   \n- Configuration value mapped with the given key  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getAsFloat(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getAsBoolean(string key, boolean defaultValue)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nRetrieves the specified configuration value as a boolean.\n```ballerina\n# boolean cachingEnabled = config:getAsBoolean(\"http.caching_enabled\");\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration to be retrieved  \n- `boolean` defaultValue: The default value to be used in case there is no mapping for the provided key(Defaultable)  \n  \n**Returns** `boolean`   \n- Configuration value mapped with the given key  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getAsBoolean(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getAsMap(string key)(config:)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nRetrieves the specified configuration value as a map.\n```ballerina\n# map<anydata> configValue = config:getAsMap(\"http.listenerConfig\");\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration to be retrieved  \n  \n**Returns** `config:`   \n- Configuration value mapped with the given key. If there is no mapping, an empty map will be returned  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getAsMap(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "getAsArray(string key)(config:)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nRetrieves the specified configuration value as an array.\n```ballerina\n# int[]|error ports = config:getAsArray(\"ports\").cloneWithType(int[]);\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration to be retrieved  \n  \n**Returns** `config:`   \n- Configuration value mapped with the given key. If there is no mapping, an empty array will be returned  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "getAsArray(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "contains(string key)(boolean)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nChecks whether the given key is in the configuration registry.\n```ballerina\n# boolean configAvailable = config:contains(\"host\");\n# ```\n  \n**Params**  \n- `string` key: The configuration key to be looked-up  \n  \n**Returns** `boolean`   \n- Returns true if the key is present; if not returs false  \n  \n"
        }
      },
      "sortText": "120",
      "insertText": "contains(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "setConfig(string key, (string|int|float|boolean) value)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/config:1.0.0_  \n  \nSets the specified key/value pair as a configuration.\n```ballerina\n# config:setConfig(\"john.country\", \"USA\");\n# ```\n  \n**Params**  \n- `string` key: The key of the configuration value to be set  \n- `(string|int|float|boolean)` value: The configuration value to be set"
        }
      },
      "sortText": "120",
      "insertText": "setConfig(${1});",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
