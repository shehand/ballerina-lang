{
  "position": {
    "line": 3,
    "character": 23
  },
  "source": "function/source/completionWithinInvocationArgs3.bal",
  "items": [
    {
      "label": "AUTH_HEADER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Authorization header name."
        }
      },
      "sortText": "120",
      "insertText": "AUTH_HEADER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AUTH_HEADER_BEARER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the authentication credentials should be sent via the Authentication Header"
        }
      },
      "sortText": "120",
      "insertText": "AUTH_HEADER_BEARER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "POST_BODY_BEARER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the Authentication credentials should be sent via the body of the POST request."
        }
      },
      "sortText": "120",
      "insertText": "POST_BODY_BEARER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NO_BEARER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the authentication credentials should not be sent"
        }
      },
      "sortText": "120",
      "insertText": "NO_BEARER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_CODE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates the status code."
        }
      },
      "sortText": "120",
      "insertText": "STATUS_CODE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NO_CACHE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Forces the cache to validate a cached response with the origin server before serving."
        }
      },
      "sortText": "120",
      "insertText": "NO_CACHE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NO_STORE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Instructs the cache to not store a response in non-volatile storage."
        }
      },
      "sortText": "120",
      "insertText": "NO_STORE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NO_TRANSFORM",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Instructs intermediaries not to transform the payload."
        }
      },
      "sortText": "120",
      "insertText": "NO_TRANSFORM",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MAX_AGE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "When used in requests, `max-age` implies that clients are not willing to accept responses whose age is greater\nthan `max-age`. When used in responses, the response is to be considered stale after the specified\nnumber of seconds."
        }
      },
      "sortText": "120",
      "insertText": "MAX_AGE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MAX_STALE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the client is willing to accept responses which have exceeded their freshness lifetime by no more\nthan the specified number of seconds."
        }
      },
      "sortText": "120",
      "insertText": "MAX_STALE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MIN_FRESH",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the client is only accepting responses whose freshness lifetime \u003e\u003d current age + min-fresh."
        }
      },
      "sortText": "120",
      "insertText": "MIN_FRESH",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ONLY_IF_CACHED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the client is only willing to accept a cached response. A cached response is served subject to\nother constraints posed by the request."
        }
      },
      "sortText": "120",
      "insertText": "ONLY_IF_CACHED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MUST_REVALIDATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that once the response has become stale, it should not be reused for subsequent requests without\nvalidating with the origin server."
        }
      },
      "sortText": "120",
      "insertText": "MUST_REVALIDATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PUBLIC",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that any cache may store the response."
        }
      },
      "sortText": "120",
      "insertText": "PUBLIC",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PRIVATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Indicates that the response is intended for a single user and should not be stored by shared caches."
        }
      },
      "sortText": "120",
      "insertText": "PRIVATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PROXY_REVALIDATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Has the same semantics as `must-revalidate`, except that this does not apply to private caches."
        }
      },
      "sortText": "120",
      "insertText": "PROXY_REVALIDATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "S_MAX_AGE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "In shared caches, `s-maxage` overrides the `max-age` or `expires` header field."
        }
      },
      "sortText": "120",
      "insertText": "S_MAX_AGE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MAX_STALE_ANY_AGE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Setting this as the `max-stale` directives indicates that the `max-stale` directive does not specify a limit."
        }
      },
      "sortText": "120",
      "insertText": "MAX_STALE_ANY_AGE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CACHE_CONTROL_AND_VALIDATORS",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "This is a more restricted mode of RFC 7234. Setting this as the caching policy restricts caching to instances\nwhere the `cache-control` header and either the `etag` or `last-modified` header are present."
        }
      },
      "sortText": "120",
      "insertText": "CACHE_CONTROL_AND_VALIDATORS",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RFC_7234",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Caching behaviour is as specified by the RFC 7234 specification."
        }
      },
      "sortText": "120",
      "insertText": "RFC_7234",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_ERROR_CODE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the http error code"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_ERROR_CODE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MULTIPART_AS_PRIMARY_TYPE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents multipart primary type"
        }
      },
      "sortText": "120",
      "insertText": "MULTIPART_AS_PRIMARY_TYPE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_FORWARD",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP FORWARD method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_FORWARD",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_GET",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP GET method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_GET",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_POST",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP POST method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_POST",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_DELETE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP DELETE method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_DELETE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_OPTIONS",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP OPTIONS method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_OPTIONS",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_PUT",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP PUT method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_PUT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_PATCH",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP PATCH method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_PATCH",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_HEAD",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the HTTP HEAD method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_HEAD",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_SUBMIT",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "constant for the HTTP SUBMIT method"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_SUBMIT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP_NONE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the identify not an HTTP Operation"
        }
      },
      "sortText": "120",
      "insertText": "HTTP_NONE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CHUNKING_AUTO",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "If the payload is less than 8KB, content-length header is set in the outbound request/response,\notherwise chunking header is set in the outbound request/response.}"
        }
      },
      "sortText": "120",
      "insertText": "CHUNKING_AUTO",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CHUNKING_ALWAYS",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Always set chunking header in the response."
        }
      },
      "sortText": "120",
      "insertText": "CHUNKING_ALWAYS",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CHUNKING_NEVER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Never set the chunking header even if the payload is larger than 8KB in the outbound request/response."
        }
      },
      "sortText": "120",
      "insertText": "CHUNKING_NEVER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "COMPRESSION_AUTO",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\noutbound request/response accept-encoding/content-encoding option."
        }
      },
      "sortText": "120",
      "insertText": "COMPRESSION_AUTO",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "COMPRESSION_ALWAYS",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Always set accept-encoding/content-encoding in outbound request/response."
        }
      },
      "sortText": "120",
      "insertText": "COMPRESSION_ALWAYS",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "COMPRESSION_NEVER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Never set accept-encoding/content-encoding header in outbound request/response."
        }
      },
      "sortText": "120",
      "insertText": "COMPRESSION_NEVER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_MULTIPLE_CHOICES_300",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `300 - Multiple Choices`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_MULTIPLE_CHOICES_300",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_MOVED_PERMANENTLY_301",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `301 - Moved Permanently`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_MOVED_PERMANENTLY_301",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_FOUND_302",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `302 - Found`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_FOUND_302",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_SEE_OTHER_303",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `303 - See Other`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_SEE_OTHER_303",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_NOT_MODIFIED_304",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `304 - Not Modified`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_NOT_MODIFIED_304",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_USE_PROXY_305",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `305 - Use Proxy`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_USE_PROXY_305",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_TEMPORARY_REDIRECT_307",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `307 - Temporary Redirect`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_TEMPORARY_REDIRECT_307",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "REDIRECT_PERMANENT_REDIRECT_308",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the HTTP redirect status code `308 - Permanent Redirect`."
        }
      },
      "sortText": "120",
      "insertText": "REDIRECT_PERMANENT_REDIRECT_308",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FAILOVER_ALL_ENDPOINTS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Resiliency errors"
        }
      },
      "sortText": "120",
      "insertText": "FAILOVER_ALL_ENDPOINTS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FAILOVER_ENDPOINT_ACTION_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "FAILOVER_ENDPOINT_ACTION_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UPSTREAM_SERVICE_UNAVAILABLE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "UPSTREAM_SERVICE_UNAVAILABLE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ALL_LOAD_BALANCE_ENDPOINTS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "ALL_LOAD_BALANCE_ENDPOINTS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ALL_RETRY_ATTEMPTS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "ALL_RETRY_ATTEMPTS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IDLE_TIMEOUT_TRIGGERED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "IDLE_TIMEOUT_TRIGGERED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AUTHN_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Security errors"
        }
      },
      "sortText": "120",
      "insertText": "AUTHN_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AUTHZ_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "AUTHZ_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INIT_OUTBOUND_REQUEST_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Outbound request errors in client"
        }
      },
      "sortText": "120",
      "insertText": "INIT_OUTBOUND_REQUEST_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WRITING_OUTBOUND_REQUEST_HEADERS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "WRITING_OUTBOUND_REQUEST_HEADERS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WRITING_OUTBOUND_REQUEST_BODY_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "WRITING_OUTBOUND_REQUEST_BODY_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INIT_INBOUND_RESPONSE_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Inbound response errors in client"
        }
      },
      "sortText": "120",
      "insertText": "INIT_INBOUND_RESPONSE_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "READING_INBOUND_RESPONSE_HEADERS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "READING_INBOUND_RESPONSE_HEADERS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "READING_INBOUND_RESPONSE_BODY_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "READING_INBOUND_RESPONSE_BODY_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INIT_INBOUND_REQUEST_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Inbound request errors in listener"
        }
      },
      "sortText": "120",
      "insertText": "INIT_INBOUND_REQUEST_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "READING_INBOUND_REQUEST_HEADERS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "READING_INBOUND_REQUEST_HEADERS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "READING_INBOUND_REQUEST_BODY_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "READING_INBOUND_REQUEST_BODY_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INIT_OUTBOUND_RESPONSE_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Outbound response errors in listener"
        }
      },
      "sortText": "120",
      "insertText": "INIT_OUTBOUND_RESPONSE_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WRITING_OUTBOUND_RESPONSE_HEADERS_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "WRITING_OUTBOUND_RESPONSE_HEADERS_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WRITING_OUTBOUND_RESPONSE_BODY_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "WRITING_OUTBOUND_RESPONSE_BODY_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INITIATING_100_CONTINUE_RESPONSE_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "INITIATING_100_CONTINUE_RESPONSE_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WRITING_100_CONTINUE_RESPONSE_FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "WRITING_100_CONTINUE_RESPONSE_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "GENERIC_CLIENT_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Generic errors (mostly to wrap errors from other modules)"
        }
      },
      "sortText": "120",
      "insertText": "GENERIC_CLIENT_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "GENERIC_LISTENER_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "GENERIC_LISTENER_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UNSUPPORTED_ACTION",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Other client-related errors"
        }
      },
      "sortText": "120",
      "insertText": "UNSUPPORTED_ACTION",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HTTP2_CLIENT_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "HTTP2_CLIENT_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MAXIMUM_WAIT_TIME_EXCEEDED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "MAXIMUM_WAIT_TIME_EXCEEDED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SSL_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "SSL_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AGE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `age`. Gives the current age of a cached HTTP response. "
        }
      },
      "sortText": "120",
      "insertText": "AGE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AUTHORIZATION",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `authorization` "
        }
      },
      "sortText": "120",
      "insertText": "AUTHORIZATION",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CACHE_CONTROL",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `cache-control`. Specifies the cache control directives required for the function of HTTP caches."
        }
      },
      "sortText": "120",
      "insertText": "CACHE_CONTROL",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CONTENT_LENGTH",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `content-length`. Specifies the size of the response body in bytes. "
        }
      },
      "sortText": "120",
      "insertText": "CONTENT_LENGTH",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CONTENT_TYPE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `content-type`. Specifies the type of the message payload. "
        }
      },
      "sortText": "120",
      "insertText": "CONTENT_TYPE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "DATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `date`. The timestamp at the time the response was generated/received. "
        }
      },
      "sortText": "120",
      "insertText": "DATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ETAG",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `etag`. A finger print for a resource which is used by HTTP caches to identify whether a\nresource representation has changed."
        }
      },
      "sortText": "120",
      "insertText": "ETAG",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "EXPECT",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `expect`. Specifies expectations to be fulfilled by the server. "
        }
      },
      "sortText": "120",
      "insertText": "EXPECT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "EXPIRES",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `expires`. Specifies the time at which the response becomes stale. "
        }
      },
      "sortText": "120",
      "insertText": "EXPIRES",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IF_MATCH",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `if-match` "
        }
      },
      "sortText": "120",
      "insertText": "IF_MATCH",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IF_MODIFIED_SINCE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `if-modified-since`. Used when validating (with the origin server) whether a cached response\nis still valid. If the representation of the resource has modified since the timestamp in this field, a\n304 response is returned."
        }
      },
      "sortText": "120",
      "insertText": "IF_MODIFIED_SINCE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IF_NONE_MATCH",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `if-none-match`. Used when validating (with the origin server) whether a cached response is\nstill valid. If the ETag provided in this field matches the representation of the requested resource, a\n304 response is returned."
        }
      },
      "sortText": "120",
      "insertText": "IF_NONE_MATCH",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IF_RANGE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `if-range` "
        }
      },
      "sortText": "120",
      "insertText": "IF_RANGE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IF_UNMODIFIED_SINCE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `if-unmodified-since` "
        }
      },
      "sortText": "120",
      "insertText": "IF_UNMODIFIED_SINCE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LAST_MODIFIED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `last-modified`. The time at which the resource was last modified. "
        }
      },
      "sortText": "120",
      "insertText": "LAST_MODIFIED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LOCATION",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `location`. Indicates the URL to redirect a request to. "
        }
      },
      "sortText": "120",
      "insertText": "LOCATION",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PRAGMA",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `pragma`. Used in dealing with HTTP 1.0 caches which do not understand the `cache-control` header."
        }
      },
      "sortText": "120",
      "insertText": "PRAGMA",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SERVER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `server`. Specifies the details of the origin server."
        }
      },
      "sortText": "120",
      "insertText": "SERVER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WARNING",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `warning`. Specifies warnings generated when serving stale responses from HTTP caches. "
        }
      },
      "sortText": "120",
      "insertText": "WARNING",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "TRANSFER_ENCODING",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `transfer-encoding`. Specifies what type of transformation has been applied to entity body. "
        }
      },
      "sortText": "120",
      "insertText": "TRANSFER_ENCODING",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CONNECTION",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `connection`. Allows the sender to specify options that are desired for that particular connection."
        }
      },
      "sortText": "120",
      "insertText": "CONNECTION",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UPGRADE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "HTTP header key `upgrade`. Allows the client to specify what additional communication protocols it supports and\nwould like to use, if the server finds it appropriate to switch protocols."
        }
      },
      "sortText": "120",
      "insertText": "UPGRADE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PASSED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Mutual SSL handshake is successful."
        }
      },
      "sortText": "120",
      "insertText": "PASSED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FAILED",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Mutual SSL handshake has failed."
        }
      },
      "sortText": "120",
      "insertText": "FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "NONE",
      "kind": "Variable",
      "detail": "()",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Not a mutual ssl connection."
        }
      },
      "sortText": "120",
      "insertText": "NONE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CB_OPEN_STATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the open state of the circuit. When the Circuit Breaker is in `OPEN` state, requests will fail\nimmediately."
        }
      },
      "sortText": "120",
      "insertText": "CB_OPEN_STATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CB_HALF_OPEN_STATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the half-open state of the circuit. When the Circuit Breaker is in `HALF_OPEN` state, a trial request\nwill be sent to the upstream service. If it fails, the circuit will trip again and move to the `OPEN` state. If not,\nit will move to the `CLOSED` state."
        }
      },
      "sortText": "120",
      "insertText": "CB_HALF_OPEN_STATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CB_CLOSED_STATE",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Represents the closed state of the circuit. When the Circuit Breaker is in `CLOSED` state, all requests will be\nallowed to go through to the upstream service. If the failures exceed the configured threhold values, the circuit\nwill trip and move to the `OPEN` state."
        }
      },
      "sortText": "120",
      "insertText": "CB_CLOSED_STATE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_CONTINUE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 100 Continue"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_CONTINUE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_SWITCHING_PROTOCOLS",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 101 Switching Protocols"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_SWITCHING_PROTOCOLS",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_OK",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 200 OK"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_OK",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_CREATED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 201 Created"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_CREATED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_ACCEPTED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 202 Accepted"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_ACCEPTED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_NON_AUTHORITATIVE_INFORMATION",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 203 Non Authoritative Information"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_NON_AUTHORITATIVE_INFORMATION",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_NO_CONTENT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 204 No Content"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_NO_CONTENT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_RESET_CONTENT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 205 Reset Content"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_RESET_CONTENT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_PARTIAL_CONTENT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 206 Partial Content"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_PARTIAL_CONTENT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_MULTIPLE_CHOICES",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 300 Multiple Choices"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_MULTIPLE_CHOICES",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_MOVED_PERMANENTLY",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 301 Moved Permanently"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_MOVED_PERMANENTLY",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_FOUND",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 302 Found"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_FOUND",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_SEE_OTHER",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 303 See Other"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_SEE_OTHER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_NOT_MODIFIED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 304 Not Modified"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_NOT_MODIFIED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_USE_PROXY",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 305 Use Proxy"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_USE_PROXY",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_TEMPORARY_REDIRECT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 307 Temporary Redirect"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_TEMPORARY_REDIRECT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_PERMANENT_REDIRECT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 308 Permanent Redirect"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_PERMANENT_REDIRECT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_BAD_REQUEST",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 400 Bad Request"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_BAD_REQUEST",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_UNAUTHORIZED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 401 Unauthorized"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_UNAUTHORIZED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_PAYMENT_REQUIRED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 402 Payment Required"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_PAYMENT_REQUIRED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_FORBIDDEN",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 403 Forbidden"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_FORBIDDEN",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_NOT_FOUND",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 404 Not Found"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_NOT_FOUND",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_METHOD_NOT_ALLOWED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 405 Method Not Allowed"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_METHOD_NOT_ALLOWED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_NOT_ACCEPTABLE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 406 Not Acceptable"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_NOT_ACCEPTABLE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_PROXY_AUTHENTICATION_REQUIRED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 407 Proxy Authentication Required"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_PROXY_AUTHENTICATION_REQUIRED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_REQUEST_TIMEOUT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 408 Request Timeout"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_REQUEST_TIMEOUT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_CONFLICT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 409 Conflict"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_CONFLICT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_GONE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 410 Gone"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_GONE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_LENGTH_REQUIRED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 411 Length Required"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_LENGTH_REQUIRED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_PRECONDITION_FAILED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 412 Precondition Failed"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_PRECONDITION_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_PAYLOAD_TOO_LARGE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 413 Payload Too Large"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_PAYLOAD_TOO_LARGE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_URI_TOO_LONG",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 414 URI Too Long"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_URI_TOO_LONG",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_UNSUPPORTED_MEDIA_TYPE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 415 Unsupported Media Type"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_UNSUPPORTED_MEDIA_TYPE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_RANGE_NOT_SATISFIABLE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 416 Range Not Satisfiable"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_RANGE_NOT_SATISFIABLE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_EXPECTATION_FAILED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 417 Expectation Failed"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_EXPECTATION_FAILED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_UPGRADE_REQUIRED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 426 Upgrade Required"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_UPGRADE_REQUIRED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_INTERNAL_SERVER_ERROR",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 500 Internal Server Error"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_INTERNAL_SERVER_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_NOT_IMPLEMENTED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 501 Not Implemented"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_NOT_IMPLEMENTED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_BAD_GATEWAY",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 502 Bad Gateway"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_BAD_GATEWAY",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_SERVICE_UNAVAILABLE",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 503 Service Unavailable"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_SERVICE_UNAVAILABLE",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_GATEWAY_TIMEOUT",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 504 Gateway Timeout"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_GATEWAY_TIMEOUT",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "STATUS_HTTP_VERSION_NOT_SUPPORTED",
      "kind": "Variable",
      "detail": "int",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "The HTTP response status code: 505 HTTP Version Not Supported"
        }
      },
      "sortText": "120",
      "insertText": "STATUS_HTTP_VERSION_NOT_SUPPORTED",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "KEEPALIVE_AUTO",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Decides to keep the connection alive or not based on the `connection` header of the client request }"
        }
      },
      "sortText": "120",
      "insertText": "KEEPALIVE_AUTO",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "KEEPALIVE_ALWAYS",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Keeps the connection alive irrespective of the `connection` header value }"
        }
      },
      "sortText": "120",
      "insertText": "KEEPALIVE_ALWAYS",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "KEEPALIVE_NEVER",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Closes the connection irrespective of the `connection` header value }"
        }
      },
      "sortText": "120",
      "insertText": "KEEPALIVE_NEVER",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SERVICE_NAME",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the service name reference."
        }
      },
      "sortText": "120",
      "insertText": "SERVICE_NAME",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RESOURCE_NAME",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "Constant for the resource name reference."
        }
      },
      "sortText": "120",
      "insertText": "RESOURCE_NAME",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CONNECTION_CLOSURE_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "CONNECTION_CLOSURE_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INVALID_HANDSHAKE_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "INVALID_HANDSHAKE_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PAYLOAD_TOO_BIG_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "PAYLOAD_TOO_BIG_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PROTOCOL_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "PROTOCOL_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CONNECTION_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "CONNECTION_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "INVALID_CONTINUATION_FRAME_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "INVALID_CONTINUATION_FRAME_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "GENERIC_ERROR",
      "kind": "Variable",
      "detail": "string",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": ""
        }
      },
      "sortText": "120",
      "insertText": "GENERIC_ERROR",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpServiceConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Contains the configurations for an HTTP service.\n"
      },
      "sortText": "120",
      "insertText": "HttpServiceConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CorsConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configurations for CORS support.\n"
      },
      "sortText": "120",
      "insertText": "CorsConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Versioning",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configurations for service versioning.\n"
      },
      "sortText": "120",
      "insertText": "Versioning",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WSServiceConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configurations for a WebSocket service.\n"
      },
      "sortText": "120",
      "insertText": "WSServiceConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpResourceConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configuration for an HTTP resource.\n"
      },
      "sortText": "120",
      "insertText": "HttpResourceConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WebSocketUpgradeConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Resource configuration to upgrade from HTTP to WebSocket.\n"
      },
      "sortText": "120",
      "insertText": "WebSocketUpgradeConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ServiceResourceAuth",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configures the authentication scheme for a service or a resource.\n"
      },
      "sortText": "120",
      "insertText": "ServiceResourceAuth",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AuthnFilter",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Representation of the Authentication filter.\n"
      },
      "sortText": "120",
      "insertText": "AuthnFilter",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AuthzFilter",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Representation of the Authorization filter\n"
      },
      "sortText": "120",
      "insertText": "AuthzFilter",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AuthzHandler",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Representation of Authorization Handler for HTTP.\n"
      },
      "sortText": "120",
      "insertText": "AuthzHandler",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InboundAuthHandler",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "The representation of an inbound authentication handler for HTTP traffic."
      },
      "sortText": "120",
      "insertText": "InboundAuthHandler",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "OutboundAuthHandler",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "The representation of an outbound authentication handler for HTTP traffic."
      },
      "sortText": "120",
      "insertText": "OutboundAuthHandler",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CredentialBearer",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Specifies how to send the authentication credentials when exchanging tokens."
      },
      "sortText": "120",
      "insertText": "CredentialBearer",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RequestCacheControl",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Configures cache control directives for a `Request`.\n"
      },
      "sortText": "120",
      "insertText": "RequestCacheControl",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ResponseCacheControl",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Configures cache control directives for a `Response`.\n"
      },
      "sortText": "120",
      "insertText": "ResponseCacheControl",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpCache",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Implements a cache for storing HTTP responses. This cache complies with the caching policy set when configuring\nHTTP caching in the HTTP client endpoint.\n"
      },
      "sortText": "120",
      "insertText": "HttpCache",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CachingPolicy",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Used for configuring the caching behaviour. Setting the `policy` field in the `CacheConfig` record allows\nthe user to control the caching behaviour."
      },
      "sortText": "120",
      "insertText": "CachingPolicy",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CacheConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides a set of configurations for controlling the caching behaviour of the endpoint.\n"
      },
      "sortText": "120",
      "insertText": "CacheConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpCachingClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "An HTTP caching client implementation which takes an `HttpActions` instance and wraps it with an HTTP caching layer.\n"
      },
      "sortText": "120",
      "insertText": "HttpCachingClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Client",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "The HTTP client provides the capability for initiating contact with a remote HTTP service. The API it\nprovides includes functions for the standard HTTP methods, forwarding a received request and sending requests\nusing custom HTTP verbs."
      },
      "sortText": "120",
      "insertText": "Client",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "TargetService",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Represents a single service and its related configurations.\n"
      },
      "sortText": "120",
      "insertText": "TargetService",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ClientConfiguration",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.\n"
      },
      "sortText": "120",
      "insertText": "ClientConfiguration",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ClientHttp1Settings",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides settings related to HTTP/1.x protocol.\n"
      },
      "sortText": "120",
      "insertText": "ClientHttp1Settings",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ClientHttp2Settings",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides settings related to HTTP/2 protocol.\n"
      },
      "sortText": "120",
      "insertText": "ClientHttp2Settings",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RetryConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides configurations for controlling the retrying behavior in failure scenarios.\n"
      },
      "sortText": "120",
      "insertText": "RetryConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ClientSecureSocket",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides configurations for facilitating secure communication with a remote HTTP endpoint.\n"
      },
      "sortText": "120",
      "insertText": "ClientSecureSocket",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FollowRedirects",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides configurations for controlling the endpoint\u0027s behaviour in response to HTTP redirect related responses.\n"
      },
      "sortText": "120",
      "insertText": "FollowRedirects",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ProxyConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Proxy server configurations to be used with the HTTP client endpoint.\n"
      },
      "sortText": "120",
      "insertText": "ProxyConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "OutboundAuthConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "The `OutboundAuthConfig` record can be used to configure the authentication mechanism used by the HTTP endpoint.\n"
      },
      "sortText": "120",
      "insertText": "OutboundAuthConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpFuture",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a \u0027future\u0027 that returns as a result of an asynchronous HTTP request submission.\nThis can be used as a reference to fetch the results of the submission."
      },
      "sortText": "120",
      "insertText": "HttpFuture",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PushPromise",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents an HTTP/2 `PUSH_PROMISE` frame.\n"
      },
      "sortText": "120",
      "insertText": "PushPromise",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Provides the HTTP actions for interacting with an HTTP server. Apart from the standard HTTP methods, `forward()`\nand `execute()` functions are provided. More complex and specific endpoint types can be created by wrapping this\ngeneric HTTP actions implementation.\n"
      },
      "sortText": "120",
      "insertText": "HttpClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpTimeoutError",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Defines a timeout error occurred during service invocation.\n"
      },
      "sortText": "120",
      "insertText": "HttpTimeoutError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "PoolConfiguration",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configurations for managing HTTP client connection pool.\n"
      },
      "sortText": "120",
      "insertText": "PoolConfiguration",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpVersion",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Defines the supported HTTP protocols.\n\n`HTTP_1_0`: HTTP/1.0 protocol\n`HTTP_1_1`: HTTP/1.1 protocol\n`HTTP_2_0`: HTTP/2.0 protocol"
      },
      "sortText": "120",
      "insertText": "HttpVersion",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Chunking",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Defines the possible values for the chunking configuration in HTTP services and clients.\n\n`AUTO`: If the payload is less than 8KB, content-length header is set in the outbound request/response,\n        otherwise chunking header is set in the outbound request/response\n`ALWAYS`: Always set chunking header in the response\n`NEVER`: Never set the chunking header even if the payload is larger than 8KB in the outbound request/response"
      },
      "sortText": "120",
      "insertText": "Chunking",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Compression",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Options to compress using gzip or deflate.\n\n`AUTO`: When service behaves as a HTTP gateway inbound request/response accept-encoding option is set as the\n        outbound request/response accept-encoding/content-encoding option\n`ALWAYS`: Always set accept-encoding/content-encoding in outbound request/response\n`NEVER`: Never set accept-encoding/content-encoding header in outbound request/response"
      },
      "sortText": "120",
      "insertText": "Compression",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpOperation",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Defines the HTTP operations related to circuit breaker, failover and load balancer.\n\n`FORWARD`: Forward the specified payload\n`GET`: Request a resource\n`POST`: Create a new resource\n`DELETE`: Deletes the specified resource\n`OPTIONS`: Request communication options available\n`PUT`: Replace the target resource\n`PATCH`: Apply partial modification to the resource\n`HEAD`: Identical to `GET` but no resource body should be returned\n`SUBMIT`: Submits a http request and returns an HttpFuture object\n`NONE`: No operation should be performed"
      },
      "sortText": "120",
      "insertText": "HttpOperation",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Protocols",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "A record for configuring SSL/TLS protocol and version to be used.\n"
      },
      "sortText": "120",
      "insertText": "Protocols",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ValidateCert",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "A record for providing configurations for certificate revocation status checks.\n"
      },
      "sortText": "120",
      "insertText": "ValidateCert",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ListenerOcspStapling",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "A record for providing configurations for certificate revocation status checks.\n"
      },
      "sortText": "120",
      "insertText": "ListenerOcspStapling",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CompressionConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "A record for providing configurations for content compression.\n"
      },
      "sortText": "120",
      "insertText": "CompressionConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Caller",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "The caller actions for responding to client requests.\n"
      },
      "sortText": "120",
      "insertText": "Caller",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RedirectCode",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Defines the HTTP redirect codes as a type."
      },
      "sortText": "120",
      "insertText": "RedirectCode",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Detail",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Holds the details of an HTTP error\n"
      },
      "sortText": "120",
      "insertText": "Detail",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FailoverAllEndpointsFailedError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "FailoverAllEndpointsFailedError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FailoverActionFailedError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "FailoverActionFailedError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UpstreamServiceUnavailableError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "UpstreamServiceUnavailableError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AllLoadBalanceEndpointsFailedError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "AllLoadBalanceEndpointsFailedError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AllRetryAttemptsFailed",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "AllRetryAttemptsFailed",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "IdleTimeoutError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "IdleTimeoutError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AuthenticationError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "AuthenticationError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "AuthorizationError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "AuthorizationError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InitializingOutboundRequestError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "InitializingOutboundRequestError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritingOutboundRequestHeadersError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WritingOutboundRequestHeadersError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritingOutboundRequestBodyError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WritingOutboundRequestBodyError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InitializingInboundResponseError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "InitializingInboundResponseError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadingInboundResponseHeadersError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "ReadingInboundResponseHeadersError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadingInboundResponseBodyError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "ReadingInboundResponseBodyError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InitializingInboundRequestError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "InitializingInboundRequestError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadingInboundRequestHeadersError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "ReadingInboundRequestHeadersError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ReadingInboundRequestBodyError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "ReadingInboundRequestBodyError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InitializingOutboundResponseError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "InitializingOutboundResponseError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritingOutboundResponseHeadersError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WritingOutboundResponseHeadersError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WritingOutboundResponseBodyError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WritingOutboundResponseBodyError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Initiating100ContinueResponseError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "Initiating100ContinueResponseError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Writing100ContinueResponseError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "Writing100ContinueResponseError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "GenericClientError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "GenericClientError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "GenericListenerError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "GenericListenerError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "UnsupportedActionError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "UnsupportedActionError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Http2ClientError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "Http2ClientError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MaximumWaitTimeExceededError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "MaximumWaitTimeExceededError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "SslError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "SslError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ResiliencyError",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Ballerina Http Union Errors"
      },
      "sortText": "120",
      "insertText": "ResiliencyError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ClientAuthError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "ClientAuthError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "OutboundRequestError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "OutboundRequestError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InboundResponseError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "InboundResponseError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "InboundRequestError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "InboundRequestError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "OutboundResponseError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "OutboundResponseError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ClientError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "ClientError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ListenerError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "ListenerError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RequestFilter",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Abstract Representation of a HTTP Request Filter.\nThis filter will be applied before the request is dispatched to the relevant resource.\nAny RequestFilter implementation should be structurally similar to or implement the RequestFilter object."
      },
      "sortText": "120",
      "insertText": "RequestFilter",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ResponseFilter",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Abstract Representation of a HTTP Response Filter.\nThis filter will be applied in the response path.\nAny ResponseFilter implementation should be structurally similar to or implement the ResponseFilter object."
      },
      "sortText": "120",
      "insertText": "ResponseFilter",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FilterContext",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Representation of request filter Context.\n"
      },
      "sortText": "120",
      "insertText": "FilterContext",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Request",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents an HTTP request.\n"
      },
      "sortText": "120",
      "insertText": "Request",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MutualSslHandshake",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "A record for providing mutual ssl handshake results.\n"
      },
      "sortText": "120",
      "insertText": "MutualSslHandshake",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MutualSslStatus",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Defines the possible values for the mutual ssl status.\n\n`passed`: Mutual SSL handshake is successful.\n`failed`: Mutual SSL handshake has failed."
      },
      "sortText": "120",
      "insertText": "MutualSslStatus",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Response",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents an HTTP response.\n"
      },
      "sortText": "120",
      "insertText": "Response",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpSecureClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Provides secure HTTP remote functions for interacting with HTTP endpoints. This will make use of the authentication\nschemes configured in the HTTP client endpoint to secure the HTTP requests.\n"
      },
      "sortText": "120",
      "insertText": "HttpSecureClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "MockListener",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Mock server endpoint which does not open a listening port."
      },
      "sortText": "120",
      "insertText": "MockListener",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RedirectClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Provides redirect functionality for HTTP client remote functions.\n"
      },
      "sortText": "120",
      "insertText": "RedirectClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FailoverConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides a set of configurations for controlling the failover behaviour of the endpoint.\n"
      },
      "sortText": "120",
      "insertText": "FailoverConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FailoverInferredConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Inferred failover configurations passed into the failover client.\n"
      },
      "sortText": "120",
      "insertText": "FailoverInferredConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FailoverClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "An HTTP client endpoint which provides failover support over multiple HTTP clients.\n"
      },
      "sortText": "120",
      "insertText": "FailoverClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "FailoverClientConfiguration",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides a set of HTTP related configurations and failover related configurations.\n"
      },
      "sortText": "120",
      "insertText": "FailoverClientConfiguration",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CircuitState",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "A finite type for modeling the states of the Circuit Breaker. The Circuit Breaker starts in the `CLOSED` state.\nIf any failure thresholds are exceeded during execution, the circuit trips and goes to the `OPEN` state. After\nthe specified timeout period expires, the circuit goes to the `HALF_OPEN` state. If the trial request sent while\nin the `HALF_OPEN` state succeeds, the circuit goes back to the `CLOSED` state."
      },
      "sortText": "120",
      "insertText": "CircuitState",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CircuitHealth",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Maintains the health of the Circuit Breaker.\n"
      },
      "sortText": "120",
      "insertText": "CircuitHealth",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CircuitBreakerConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides a set of configurations for controlling the behaviour of the Circuit Breaker.\n"
      },
      "sortText": "120",
      "insertText": "CircuitBreakerConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RollingWindow",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Represents a rolling window in the Circuit Breaker.\n"
      },
      "sortText": "120",
      "insertText": "RollingWindow",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Bucket",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Represents a discrete sub-part of the time window (Bucket).\n"
      },
      "sortText": "120",
      "insertText": "Bucket",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CircuitBreakerInferredConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Derived set of configurations from the `CircuitBreakerConfig`.\n"
      },
      "sortText": "120",
      "insertText": "CircuitBreakerInferredConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "CircuitBreakerClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "A Circuit Breaker implementation which can be used to gracefully handle network failures.\n"
      },
      "sortText": "120",
      "insertText": "CircuitBreakerClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LoadBalancerRule",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "\nLoadBalancerRule provides a required interfaces to implement different algorithms.\n"
      },
      "sortText": "120",
      "insertText": "LoadBalancerRule",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RetryInferredConfig",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Derived set of configurations from the `RetryConfig`.\n"
      },
      "sortText": "120",
      "insertText": "RetryInferredConfig",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RetryClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Provides the HTTP remote functions for interacting with an HTTP endpoint. This is created by wrapping the HTTP client\nto provide retrying over HTTP requests.\n"
      },
      "sortText": "120",
      "insertText": "RetryClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LoadBalancerRoundRobinRule",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Implementation of round robin load balancing strategy.\n"
      },
      "sortText": "120",
      "insertText": "LoadBalancerRoundRobinRule",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LoadBalanceClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "LoadBalanceClient endpoint provides load balancing functionality over multiple HTTP clients.\n"
      },
      "sortText": "120",
      "insertText": "LoadBalanceClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LoadBalanceActionErrorData",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Represents an error occurred in an remote function of the Load Balance connector.\n"
      },
      "sortText": "120",
      "insertText": "LoadBalanceActionErrorData",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LoadBalanceActionError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "LoadBalanceActionError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "LoadBalanceClientConfiguration",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "The configurations related to the load balance client endpoint.\n"
      },
      "sortText": "120",
      "insertText": "LoadBalanceClientConfiguration",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Listener",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "This is used for creating HTTP server endpoints. An HTTP server endpoint is capable of responding to\nremote callers. The `Listener` is responsible for initializing the endpoint using the provided configurations."
      },
      "sortText": "120",
      "insertText": "Listener",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Remote",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Presents a read-only view of the remote address.\n"
      },
      "sortText": "120",
      "insertText": "Remote",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "Local",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Presents a read-only view of the local address.\n"
      },
      "sortText": "120",
      "insertText": "Local",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ListenerConfiguration",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides a set of configurations for HTTP service endpoints.\n"
      },
      "sortText": "120",
      "insertText": "ListenerConfiguration",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ListenerHttp1Settings",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Provides settings related to HTTP/1.x protocol.\n"
      },
      "sortText": "120",
      "insertText": "ListenerHttp1Settings",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ListenerAuth",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Authentication configurations for the listener.\n"
      },
      "sortText": "120",
      "insertText": "ListenerAuth",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ListenerSecureSocket",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configures the SSL/TLS options to be used for HTTP service.\n"
      },
      "sortText": "120",
      "insertText": "ListenerSecureSocket",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "KeepAlive",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "Defines the possible values for the keep-alive configuration in service and client endpoints."
      },
      "sortText": "120",
      "insertText": "KeepAlive",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WebSocketListener",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a WebSocket service endpoint."
      },
      "sortText": "120",
      "insertText": "WebSocketListener",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsConnectionClosureError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsConnectionClosureError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsInvalidHandshakeError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsInvalidHandshakeError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsPayloadTooBigError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsPayloadTooBigError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsProtocolError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsProtocolError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsConnectionError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsConnectionError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsInvalidContinuationFrameError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsInvalidContinuationFrameError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WsGenericError",
      "kind": "Keyword",
      "detail": "Error",
      "sortText": "120",
      "insertText": "WsGenericError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WebSocketError",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "WebSocketError",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WebSocketCaller",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a WebSocket caller."
      },
      "sortText": "120",
      "insertText": "WebSocketCaller",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WebSocketClient",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Represents a WebSocket client endpoint."
      },
      "sortText": "120",
      "insertText": "WebSocketClient",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "WebSocketClientConfiguration",
      "kind": "Class",
      "detail": "Record",
      "documentation": {
        "left": "Configuration for the WebSocket client endpoint.\n"
      },
      "sortText": "120",
      "insertText": "WebSocketClientConfiguration",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "BasicAuthHandler",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Defines the Basic Auth header handler for inbound and outbound HTTP traffic.\n"
      },
      "sortText": "120",
      "insertText": "BasicAuthHandler",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "BearerAuthHandler",
      "kind": "Class",
      "detail": "Object",
      "documentation": {
        "left": "Representation of the Bearer Auth header handler for both inbound and outbound HTTP traffic.\n"
      },
      "sortText": "120",
      "insertText": "BearerAuthHandler",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "RequestMessage",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "The types of messages that are accepted by HTTP `client` when sending out the outbound request."
      },
      "sortText": "120",
      "insertText": "RequestMessage",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "ResponseMessage",
      "kind": "Enum",
      "detail": "Union",
      "documentation": {
        "left": "The types of messages that are accepted by HTTP `listener` when sending out the outbound response."
      },
      "sortText": "120",
      "insertText": "ResponseMessage",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "HttpResponse",
      "kind": "Enum",
      "detail": "Union",
      "sortText": "120",
      "insertText": "HttpResponse",
      "insertTextFormat": "Snippet"
    },
    {
      "label": "extractAuthorizationHeaderValue(http:Request req)(string)",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nExtracts the Authorization header value from the request.\n  \n**Params**  \n- `http:Request` req: Request instance  \n  \n**Returns** `string`   \n- Value of the Authorization header  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "extractAuthorizationHeaderValue(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "createHttpCachingClient(string url, http:ClientConfiguration config, http:CacheConfig cacheConfig)((http:HttpClient|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nCreates an HTTP client capable of caching HTTP responses.\n  \n**Params**  \n- `string` url: The URL of the HTTP endpoint to connect to  \n- `http:ClientConfiguration` config: The configurations for the client endpoint associated with the caching client  \n- `http:CacheConfig` cacheConfig: The configurations for the HTTP cache to be used with the caching client  \n  \n**Returns** `(http:HttpClient|error)`   \n- An `HttpCachingClient` instance which wraps the base `Client` with a caching layer  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "createHttpCachingClient(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "parseHeader(string headerValue)(([string,map\u003cany\u003e]|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nParses the given header value to extract its value and parameter map.\n  \n**Params**  \n- `string` headerValue: The header value  \n  \n**Returns** `([string,map\u003cany\u003e]|error)`   \n- Returns a tuple containing the value and its parameter map  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "parseHeader(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "invokeEndpoint(string path, http:Request outRequest, (FORWARD|GET|POST|DELETE|OPTIONS|PUT|PATCH|HEAD|SUBMIT|NONE) requestAction, http:HttpClient httpClient, string verb)((http:Response|http:HttpFuture|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nThe HEAD remote function implementation of the Circuit Breaker. This wraps the `head()` function of the underlying\nHTTP remote function provider.  \n**Params**  \n- `string` path: Resource path  \n- `http:Request` outRequest: A Request struct  \n- `(FORWARD|GET|POST|DELETE|OPTIONS|PUT|PATCH|HEAD|SUBMIT|NONE)` requestAction: `HttpOperation` related to the request  \n- `http:HttpClient` httpClient: HTTP client which uses to call the relevant functions  \n- `string` verb: HTTP verb used for submit method(Defaultable)  \n- `string` verb: HTTP verb used for submit method  \n  \n**Returns** `(http:Response|http:HttpFuture|error)`   \n- The response for the request or an `http:ClientError` if failed to establish communication with the upstream server  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "invokeEndpoint(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "createHttpSecureClient(string url, http:ClientConfiguration config)((http:HttpClient|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nCreates an HTTP client capable of securing HTTP requests with authentication.\n  \n**Params**  \n- `string` url: Base URL  \n- `http:ClientConfiguration` config: Client endpoint configurations  \n  \n**Returns** `(http:HttpClient|error)`   \n- Created secure HTTP client  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "createHttpSecureClient(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "encode(string url, string charset)((string|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nEncodes the given URL.\n  \n**Params**  \n- `string` url: URL to be encoded  \n- `string` charset: Charactor set that URL to be encoded in  \n  \n**Returns** `(string|error)`   \n- The `string` Value of the encoded url or an `ClientError` that occurred during encoding  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "encode(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    },
    {
      "label": "decode(string url, string charset)((string|error))",
      "kind": "Function",
      "detail": "Function",
      "documentation": {
        "right": {
          "kind": "markdown",
          "value": "**Package:** _ballerina/http_  \n  \nDecodes the given URL.\n  \n**Params**  \n- `string` url: URL to be decoded  \n- `string` charset: Character set from which the URL is decoded  \n  \n**Returns** `(string|error)`   \n- The `string` Value of the decoded url or an `ClientError` that occurred during decoding  \n  \n"
        }
      },
      "sortText": "130",
      "insertText": "decode(${1})",
      "insertTextFormat": "Snippet",
      "command": {
        "title": "editor.action.triggerParameterHints",
        "command": "editor.action.triggerParameterHints"
      }
    }
  ]
}
