public type {{serviceName}}{{#equals stubType "blocking"}}Blocking{{/equals}}Client client object {

    *grpc:AbstractClientEndpoint;

    private grpc:Client grpcClient;

    public function __init(string url, grpc:ClientConfiguration? config = ()) {
        // initialize client endpoint.
        self.grpcClient = new(url, config);
        checkpanic self.grpcClient.initStub(self, "{{stubType}}", ROOT_DESCRIPTOR, getDescriptorMap());
    }
{{#blockingFunctions}}
    public remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}grpc:Headers? headers = ()) returns ({{#if outputType}}[{{outputType}}, grpc:Headers]{{else}}grpc:Headers{{/if}}|grpc:Error) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        var payload = check self.grpcClient->blockingExecute("{{methodId}}", req, headers);
        grpc:Headers resHeaders = new;
        {{#if outputType}}anydata result = ();
        [result, resHeaders] = payload;
        {{#not_equal outputType "string"}}
        return [<{{outputType}}>result, resHeaders];
        {{/not_equal}}{{#equals outputType "string"}}return [result.toString(), resHeaders];{{/equals}}{{else}}[_, resHeaders] = payload;
        return resHeaders;{{/if}}
    }
{{/blockingFunctions}}{{#nonBlockingFunctions}}
    public remote function {{methodName}}({{#if inputType}}{{inputType}} req, {{/if}}service msgListener, grpc:Headers? headers = ()) returns (grpc:Error?) {
        {{#unless inputType}}Empty req = {};{{/unless}}
        return self.grpcClient->nonBlockingExecute("{{methodId}}", req, msgListener, headers);
    }
{{/nonBlockingFunctions}}{{#streamingFunctions}}
    public remote function {{methodName}}(service msgListener, grpc:Headers? headers = ()) returns (grpc:StreamingClient|grpc:Error) {
        return self.grpcClient->streamingExecute("{{methodId}}", msgListener, headers);
    }{{/streamingFunctions}}
};