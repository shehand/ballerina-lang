sayHello function(ballerina/http:1.0.0:Caller, ballerina/http:1.0.0:Request) -> error{map<anydata | readonly>} | () {
    %1(RETURN) error | ();
    %2(ARG) ballerina/http:1.0.0:Caller;
    %3(ARG) ballerina/http:1.0.0:Request;
    %1(RETURN) error | ();
    %2(ARG) ballerina/http:1.0.0:Caller;
    %3(ARG) ballerina/http:1.0.0:Request;
    %4(SYNTHETIC) ballerina/http:1.0.0:FilterContext;
    %5(SYNTHETIC) ballerina/http:1.0.0:FilterContext;
    %9(TEMP) string;
    %10(TEMP) string;
    %11(TEMP) ();
    %13(TEMP) ballerina/http:1.0.0:FilterContext | ();
    %17(SYNTHETIC) ballerina/http:1.0.0:RequestFilter | ballerina/http:1.0.0:ResponseFilter[];
    %19(TEMP) ballerina/http:1.0.0:ListenerConfiguration;
    %23(SYNTHETIC) ballerina/lang.array:1.1.0:$anonType$1;
    %26(TEMP) ballerina/lang.array:1.1.0:$anonType$1;
    %27(SYNTHETIC) ballerina/lang.array:1.1.0:$anonType$0 | ();
    %31(TEMP) ballerina/lang.array:1.1.0:$anonType$0 | ();
    %32(TEMP) boolean;
    %34(SYNTHETIC) ballerina/http:1.0.0:RequestFilter | ballerina/http:1.0.0:ResponseFilter;
    %36(TEMP) ballerina/http:1.0.0:RequestFilter | ballerina/http:1.0.0:ResponseFilter;
    %37(TEMP) ballerina/lang.array:1.1.0:$anonType$0;
    %44(SYNTHETIC) boolean;
    %46(TEMP) ballerina/http:1.0.0:RequestFilter;
    %58(SYNTHETIC) ();
    %59(SYNTHETIC) error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | error{map<anydata | readonly>} | ();
    %61(TEMP) ballerina/http:1.0.0:Response | string | xml | json | byte[] | ballerina/io:0.5.0:ReadableByteChannel | ballerina/mime:1.0.0:Entity[];
    %65(TEMP) ();
    %67(SYNTHETIC) ();
    %72(SYNTHETIC) error;

    bb0 {
        %5 = new ballerina/http:1.0.0:FilterContext;
        %9 = ConstLoad hello;
        %10 = ConstLoad sayHello;
        %11 = FilterContext.$init$(%5, %self, %9, %10) -> bb1;
    }
    bb1 {
        %4 = %5;
        %13 = <ballerina/http:1.0.0:FilterContext | ()> %4;
        %9 = ConstLoad filterContext;
        %2[%9] = %13;
        %10 = ConstLoad config;
        %19;
        %9 = ConstLoad filters;
        %17 = %19[%9];
        %26 = iterator(%17) -> bb2;
    }
    bb2 {
        %23 = <ballerina/lang.array:1.1.0:$anonType$1> %26;
        %31 = $anonType$1.next(%23, %23) -> bb3;
    }
    bb3 {
        %27 = <ballerina/lang.array:1.1.0:$anonType$0 | ()> %31;
        GOTO bb4;
    }
    bb4 {
        %32 = %27 is ballerina/lang.array:1.1.0:$anonType$0;
        %32? bb5 : bb14;
    }
    bb5 {
        %37 = <ballerina/lang.array:1.1.0:$anonType$0> %27;
        %10 = ConstLoad value;
        %36 = %37[%10];
        %34 = <ballerina/http:1.0.0:RequestFilter> %36;
        %31 = $anonType$1.next(%23, %23) -> bb6;
    }
    bb6 {
        %27 = <ballerina/lang.array:1.1.0:$anonType$0 | ()> %31;
        %46 = <ballerina/http:1.0.0:RequestFilter> %34;
        %32 = %46 is ballerina/http:1.0.0:RequestFilter;
        %32? bb7 : bb9;
    }
    bb7 {
        %46 = <ballerina/http:1.0.0:RequestFilter> %34;
        %32 = RequestFilter.filterRequest(%46, %2, %3, %4) -> bb8;
    }
    bb8 {
        %44 = not %32;
        GOTO bb10;
    }
    bb9 {
        %44 = ConstLoad false;
        GOTO bb10;
    }
    bb10 {
        %44? bb11 : bb13;
    }
    bb11 {
        %1 = ConstLoad 0;
        GOTO bb23;
    }
    bb12 {
        GOTO bb13;
    }
    bb13 {
        GOTO bb4;
    }
    bb14 {
        %9 = ConstLoad Hello, World!;
        %61 = <ballerina/http:1.0.0:Response | string | xml | json | byte[] | ballerina/io:0.5.0:ReadableByteChannel | ballerina/mime:1.0.0:Entity[]> %9;
        %59 = Caller.respond(%2, %61) -> bb15;
    }
    bb15 {
        %65 = ConstLoad 0;
        %32 = %59 == %65;
        %32? bb16 : bb17;
    }
    bb16 {
        %67 = %59;
        %58 = %67;
        GOTO bb21;
    }
    bb17 {
        %32 = %59 is error;
        %32? bb18 : bb20;
    }
    bb18 {
        %72 = <error> %59;
        %1 = %72;
        GOTO bb23;
    }
    bb19 {
        GOTO bb20;
    }
    bb20 {
        GOTO bb21;
    }
    bb21 {
        %1 = ConstLoad 0;
        GOTO bb23;
    }
    bb22 {
        GOTO bb23;
    }
    bb23 {
        return;
    }


}
