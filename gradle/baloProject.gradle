import org.gradle.internal.os.OperatingSystem

apply from: "$rootDir/gradle/javaProjectWithExtBalo.gradle"

configurations {
    balo { transitive false }
    balx { transitive false }
    oldBirJar { transitive false }
    oldBir { transitive false }
}

project.ext.moduleName = files(file('src/main/ballerina/src').listFiles()).filter { File f ->
    f.isDirectory() && f.name != 'target' && f.name != '.ballerina'
}.singleFile.name


def duplicateSrcPath = "$buildDir/duplicate-src"
def baloCreationPath = "$duplicateSrcPath/.ballerina/repo/ballerina"
def balxCreationPath = "$duplicateSrcPath/target"
def buildLog = file("$duplicateSrcPath/ballerina-internal.log")


// We duplicate source to avoid creating garbage in source dir
task duplicateBalSouce(type: Copy) {
    from("src/main/ballerina/") {
        exclude '.ballerina/**', 'target/**', 'ballerina-internal.log'
    }
    into duplicateSrcPath

    outputs.cacheIf { false }
}

task convertDuplicateSrcToProject() {
    dependsOn duplicateBalSouce

    def dotBalDir = duplicateSrcPath + "/.ballerina";
    doLast {
        mkdir dotBalDir
    }

    outputs.upToDateWhen {
        file(dotBalDir).exists()
    }
    outputs.cacheIf { false }
}

task deleteBirJar(type: Delete) {
  delete "build/duplicate-src/target"
}

task deleteBalBuildLog(type: Delete) {
  delete buildLog
}

task copySelfToExternal(type: Copy) {
    dependsOn jar
    from "$buildDir/libs/"
    include "*.jar"
    into "$buildDir/externals"
    rename '.*', "${project.ext.moduleName}.jar"
}

task createOldBirJar() {
//    dependsOn deleteBalBuildLog
//    dependsOn configurations.balo
//    dependsOn convertDuplicateSrcToProject
//    dependsOn copySelfToExternal
//    workingDir "$buildDir/duplicate-src"
//    dependsOn jar
//
////    environment 'BALLERINA_REPO_LOOKUP_VERBOSE': 'true'
////    environment 'BAL_JAVA_DEBUG': '5005'
//
//    doFirst {
//        if (file("$buildDir/classes/java/main/META-INF/this.map.json").exists()) {
//        }
//        configurations.balo.each {
//            if (OperatingSystem.current().isWindows()) {
//                commandLine 'cmd.exe', '/c', new File(it, '/bin/ballerina.bat'), 'build', '--offline', '-c', '--skip-tests', project.ext.moduleName
//            } else {
//                commandLine 'sh', new File(it, '/bin/ballerina'), 'build', '--offline', '-c', '--skip-tests', project.ext.moduleName
//            }
//            println commandLine
//        }
//    }
//
//    doLast {
//        if (buildLog.exists()) {
//            println "contents of " + buildLog + " :"
//            println file(buildLog).text
//            throw new GradleException("ballerina internal error")
//        }
//    }
//
//    inputs.files configurations.balo
//    inputs.dir "src/main/ballerina/"
//    outputs.dir "build/duplicate-src/target"
//    outputs.dir balxCreationPath
//    outputs.cacheIf { true }
}

task copyBirJar(type: Copy){
    from "$buildDir/duplicate-src/target/caches"
    into "$buildDir/generated-bir-jar"
    dependsOn createOldBirJar
    includeEmptyDirs = false
    eachFile {file ->
        file.path = file.path.replaceAll(/^.*\//, '').replaceAll(/ballerina-/, '').replaceAll(/-.jar/, '.jar')
    }
}

artifacts {
    balo file(baloCreationPath), { builtBy(createOldBirJar) }
    balx file(balxCreationPath), { builtBy(createOldBirJar) }
    oldBir file('build/generated-bir-jar/' + project.ext.moduleName + '.bir'), {builtBy(copyBirJar)}
    oldBirJar file('build/generated-bir-jar/' + project.ext.moduleName + '.jar'), {builtBy(copyBirJar)}
}

compileJava {
    dependsOn configurations.balo
    doFirst {
        configurations.balo.each {
            sourceSets.main.compileClasspath = fileTree(dir : new File(it, '/bre/lib/').path)
        }
    }
}

createJavadoc {
    enabled = false
}

spotbugsMain {
    enabled = false
}

